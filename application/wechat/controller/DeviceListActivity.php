<?php


namespace app\wechat\controller;


use app\api\controller\wechat\Device;
use app\common\encrypt\Aes;
use think\response\Json;

class DeviceListActivity extends BaseWeChat
{
    
    
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //如果未登陆，返回绑定界面授权
        if (!$this->isLogin()) {
            return $this->redirect('BindPhoneActivity/index');
        }
    }
    
    
    /**
     *  查询当前用户所有绑定的设备
     * @return mixed
     */
    public function index()
    {
        
        $model = new Device();
        $data = ($model->getUserBindDevices($this->localUser));
    
        //utilsSaveLogs(json_encode($data),4);
        
        $this->assign('list', json_encode($data));
        //var_dump(json_encode($data));
        return $this->fetch('', ['devicesList' => $data]);
        
    }
    
    /**
     *  重命名设备
     * @return string|Json
     */
    public function reNameDevice()
    {
        
        if (!$this->request->isPost()) {
            return '';
        }
        $postData = input('post.');
        $token = Aes::opensslDecrypt($this->localUser['token'], config('encryptKey.AES_WECHAT_UNIONID_TOKEN'));
        $token = json_decode($token);
        //return $this->utlisResponse('token校验！'.json_encode($token), false);
        
        if ($token) {
            //判断有效期 是否处于有效期内？否则需要重新获取
            if (time() > $token->deadline) {
                return $this->utlisResponse('token失效！', false);
            }
            if (!isset($token->name)) {
                return $this->utlisResponse('非微信用户！', false);
            }
            //判断用户已经注册？
            try {
                $user = model('User')->get(['openId' => $token->name]);
            } catch (\Exception $exception) {
                return $this->utlisResponse('' . $exception->getMessage(), false);
            }
            
            if (!$user) {
                return $this->utlisResponse('该用户不存在！', false);
            }
        } else {
            return $this->utlisResponse('非法用户！', false);
        }
        
        //第四步：判断设备是否已经注册以及该产品是否注册
        try {
            $device = model('RelDeviceUser')->get(['user_id' => $user->id, 'uuid' => $postData['uuid']]);
        } catch (\Exception $exception) {
            return $this->utlisResponse('' . $exception->getMessage(), false);
        }
        
        if (!$device) {
            return $this->utlisResponse('设备不存在', false);
        }
        
        //第五步：重命名
        $updata = [
            'alias' => $postData['newName'],
        ];
        try {
            $device = model('RelDeviceUser')->save($updata, ['device_id' => $device['id']]);
        } catch (\Exception $exception) {
            return $this->utlisResponse('' . $exception->getMessage(), false);
        }
        
        if ($device) {
            return $this->utlisResponse('', true);
        } else {
            return $this->utlisResponse('错误码002', false);
        }
    }
    
    
    /**
     *  解绑设备
     * @return string|Json
     */
    public function deleteRelDevice()
    {
        
        if (!$this->request->isPost()) {
            return '';
        }
        $postData = input('post.');
        $token = Aes::opensslDecrypt($this->localUser['token'], config('encryptKey.AES_WECHAT_UNIONID_TOKEN'));
        $token = json_decode($token);
        //return $this->utlisResponse('token校验！'.json_encode($token), false);
        
        if ($token) {
            //判断有效期 是否处于有效期内？否则需要重新获取
            if (time() > $token->deadline) {
                return $this->utlisResponse('token失效！', false);
            }
            if (!isset($token->name)) {
                return $this->utlisResponse('非微信用户！', false);
            }
            //判断用户已经注册？
            try {
                $user = model('User')->get(['openId' => $token->name]);
            } catch (\Exception $exception) {
                return $this->utlisResponse('' . $exception->getMessage(), false);
            }
            
            if (!$user) {
                return $this->utlisResponse('该用户不存在！', false);
            }
        } else {
            return $this->utlisResponse('非法用户！', false);
        }
        
        //第四步：判断设备是否已经注册以及该产品是否注册
        try {
            $device = model('RelDeviceUser')->get(['user_id' => $user->id, 'uuid' => $postData['uuid']]);
        } catch (\Exception $exception) {
            return $this->utlisResponse('' . $exception->getMessage(), false);
        }
        
        if (!$device) {
            return $this->utlisResponse('设备不存在', false);
        }
        
        
        //第五步：删除记录
        try {
             $device->delete();
        } catch (\Exception $exception) {
            return $this->utlisResponse('' . $exception->getMessage(), false);
        }
        
        
        return $this->utlisResponse('', true);
        
    }




    public function intoControl()
    {


        $post = input('get.');

        //确定此设备是否属于该用户以及该设备是否在线
        //start 解密，判断是否是aes加密后数据
        $token = Aes::opensslDecrypt($this->localUser['token'], config('encryptKey.AES_WECHAT_UNIONID_TOKEN'));
        $token = json_decode($token);
        //return $this->utlisResponse('token校验！'.json_encode($token), false);

        if ($token) {

            //判断有效期 是否处于有效期内？否则需要重新获取
            if (time() > $token->deadline) {
                return $this->utlisResponse('token失效！', false);
            }

            if (!isset($token->name)) {
                return $this->utlisResponse('非微信用户！', false);
            }

            //判断用户已经注册？
            try {
                $user = model('User')->get(['openId' => $token->name]);
            } catch (\Exception $exception) {
                return $this->utlisResponse('' . $exception->getMessage(), false);
            }

            if (!$user) {
                return $this->utlisResponse('该用户不存在！', false);
            }
        } else {
            return $this->utlisResponse('非法用户！', false);
        }

        //第四步：判断设备是否已经注册以及该产品是否注册
        try {
            $device = model('RelDeviceUser')->get(['user_id' => $user->id, 'uuid' => $post['uuid']]);
        } catch (\Exception $exception) {
            return $this->utlisResponse('' . $exception->getMessage(), false);
        }

        //第五步：判断是否在线
        if ($device && $device['online']) {
            $deviceProduct = config('devicesAttr.' . $device['type']);
            if ($deviceProduct) {
                $this->redirect($deviceProduct['htmlControl'], array("deviceId" => $device['device_id'], "deviceName" => $device['alias'], 'uuid' => $device['uuid'], 'type' => $device['type'], 'attr' => $device['attrbute']));
            }
        } else  return $this->utlisResponse('设备离线或者不存在', false);;

    }


    public function control2rgb($deviceId, $deviceName, $uuid, $type ,$attr)
    {
        $data = [
            'deviceId' => $deviceId,
            'name' => $deviceName,
            'uuid' => $uuid,
            'type' => $type,
            'attr' => $attr,
            'topicSub' => getDeviceTopicSub($type, $uuid),
            'topicPub' => getDeviceTopicPub($type, $uuid),
            'clientId' => 'wc_' . md5(time()),
            'mqtt' => config('mqtt'),
        ];
        $this->assign('config', json_encode($data));
        return $this->fetch('', ['device' => $data]);
    }

    public function control2light($deviceId, $deviceName, $uuid, $type ,$attr)
    {
        $data = [
            'deviceId' => $deviceId,
            'name' => $deviceName,
            'uuid' => $uuid,
            'type' => $type,
            'attr' => $attr,
            'topicSub' => getDeviceTopicSub($type, $uuid),
            'topicPub' => getDeviceTopicPub($type, $uuid),
            'clientId' => 'wc_' . md5(time()),
            'mqtt' => config('mqtt'),
        ];
        $this->assign('config', json_encode($data));
        return $this->fetch('', ['device' => $data]);
    }



}